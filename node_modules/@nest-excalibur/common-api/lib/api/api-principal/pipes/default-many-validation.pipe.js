"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultManyValidationPipe = void 0;
const default_validation_pipe_1 = require("./default-validation.pipe");
const common_1 = require("@nestjs/common");
const validate_many_1 = require("../../shared-utils/validate-many");
const logger_service_1 = require("../services/logger.service");
class DefaultManyValidationPipe extends default_validation_pipe_1.DefaultValidationPipe {
    transform(value, metadata) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.dto || !this.toValidate(this.dto)) {
                return value;
            }
            const validationErrors = yield validate_many_1.validateMany(value, this.dto);
            const logger = logger_service_1.LoggerService.getInstance().logger;
            if (validationErrors.length > 0) {
                logger.error(validationErrors, 'DefaultManyValidationPipe');
                throw new common_1.BadRequestException({ message: 'Invalid payload' });
            }
            return value;
        });
    }
}
exports.DefaultManyValidationPipe = DefaultManyValidationPipe;
