"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractService = void 0;
const principal_service_1 = require("./principal.service");
const __1 = require("../../..");
class AbstractService extends principal_service_1.PrincipalService {
    findAllWithTransaction(entityManager, query) {
        return __awaiter(this, void 0, void 0, function* () {
            const tableName = this._repository.metadata.tableName;
            return yield __1.findFullTransaccion(entityManager, tableName, query);
        });
    }
    findOneWithTransaction(entityManager, criteria, record) {
        return __awaiter(this, void 0, void 0, function* () {
            const tableName = this._repository.metadata.tableName;
            const repository = entityManager.getRepository(tableName);
            const response = yield repository.findOne(criteria, record);
            return {
                response,
                entityManager,
            };
        });
    }
    updateOneWithTransaction(entityManager, criteria, record) {
        return __awaiter(this, void 0, void 0, function* () {
            const tableName = this._repository.metadata.tableName;
            const repository = entityManager.getRepository(tableName);
            const upadteResponse = yield repository.update(criteria, record);
            const response = yield repository.findOneOrFail(criteria);
            return {
                response,
                entityManager,
            };
        });
    }
    createOneWithTransaction(entityManager, newRecord) {
        return __awaiter(this, void 0, void 0, function* () {
            const tableName = this._repository.metadata.tableName;
            const repository = entityManager.getRepository(tableName);
            const response = yield repository.save(newRecord);
            return {
                response,
                entityManager,
            };
        });
    }
    createManyWithTransaction(entityManager, newRecords) {
        return __awaiter(this, void 0, void 0, function* () {
            const tableName = this._repository.metadata.tableName;
            const repository = entityManager.getRepository(tableName);
            const response = yield repository.save(newRecords);
            return {
                response,
                entityManager,
            };
        });
    }
    deleteOneWithTransaction(entityManager, criteria) {
        return __awaiter(this, void 0, void 0, function* () {
            const tableName = this._repository.metadata.tableName;
            const repository = entityManager.getRepository(tableName);
            const recordToDelete = yield repository.findOneOrFail(criteria);
            const deleteResponse = yield repository.delete(criteria);
            return {
                entityManager,
                response: recordToDelete,
            };
        });
    }
    deleteManyByIdsWithTransaction(entityManager, ids) {
        return __awaiter(this, void 0, void 0, function* () {
            const tableName = this._repository.metadata.tableName;
            const repository = entityManager.getRepository(tableName);
            const recordToDelete = yield repository.findByIds(ids);
            const query = repository.createQueryBuilder(tableName)
                .delete()
                .where('id IN(:ids)', { ids: ids.join(',') });
            const deleteResponse = yield query.execute();
            return {
                entityManager,
                response: recordToDelete,
            };
        });
    }
}
exports.AbstractService = AbstractService;
