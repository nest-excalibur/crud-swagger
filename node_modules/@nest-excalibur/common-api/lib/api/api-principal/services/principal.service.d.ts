import { DeepPartial, FindManyOptions, Repository } from 'typeorm';
import { FindFullQuery } from '../../..';
import { ServiceCrudMethodsInterface } from '../../..';
export declare abstract class PrincipalService<Entity> implements ServiceCrudMethodsInterface<Entity> {
    protected readonly _repository: Repository<Entity>;
    protected constructor(_repository: Repository<Entity>);
    createMany(records: DeepPartial<Entity>[]): Promise<Entity[]>;
    createOne(record: DeepPartial<Entity>): Promise<Entity>;
    updateOne(id: number | string, record: DeepPartial<Entity>): Promise<Entity>;
    deleteOne(recordId: number): Promise<Entity>;
    findAll(query?: FindFullQuery | FindManyOptions): Promise<[Entity[], number]>;
    findOne(query?: FindManyOptions<Entity>): Promise<Entity>;
    findOneById(id: number | string): Promise<Entity>;
}
