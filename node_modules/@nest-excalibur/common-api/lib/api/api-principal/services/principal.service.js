"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrincipalService = void 0;
const __1 = require("../../..");
const crud_exception_filter_1 = require("../exceptions/crud-exception.filter");
class PrincipalService {
    constructor(_repository) {
        this._repository = _repository;
    }
    createMany(records) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield this._repository.save(records);
            }
            catch (error) {
                throw new crud_exception_filter_1.CreateManyException({
                    error,
                    message: 'Error on create many',
                    data: {
                        records,
                    },
                });
            }
        });
    }
    createOne(record) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield this._repository.save(record);
            }
            catch (error) {
                throw new crud_exception_filter_1.CreateOneException({
                    error,
                    message: 'Error on create',
                    data: record,
                });
            }
        });
    }
    updateOne(id, record) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const updatedRecord = yield this._repository.update(+id, record);
                return yield this._repository.findOneOrFail(+id);
            }
            catch (error) {
                throw new crud_exception_filter_1.UpdateOneException({
                    error,
                    message: 'Error on update',
                    data: {
                        id,
                        record,
                    },
                });
            }
        });
    }
    deleteOne(recordId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const recordToDelete = Object.assign({}, yield this._repository.findOne(+recordId));
                return yield this._repository.remove(recordToDelete);
            }
            catch (error) {
                throw new crud_exception_filter_1.DeleteOneException({
                    error,
                    message: 'Error on delete',
                    data: {
                        id: recordId,
                    },
                });
            }
        });
    }
    findAll(query) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const hasQuery = query && Object.keys(query).length > 0;
                if (!hasQuery) {
                    return yield this._repository.findAndCount({ skip: 0, take: 10 });
                }
                else {
                    const hasWhereCondition = (query === null || query === void 0 ? void 0 : query.where) !== undefined;
                    const tableName = this._repository.metadata.tableName;
                    const connection = this._repository.metadata.connection.name;
                    if (hasWhereCondition) {
                        return yield __1.findFull(tableName, query, connection);
                    }
                    else {
                        const reformatQuery = Object.assign({ where: {} }, query);
                        return yield __1.findFull(tableName, reformatQuery, connection);
                    }
                }
            }
            catch (error) {
                throw new crud_exception_filter_1.FindAllException({
                    error,
                    message: 'Error on find',
                    data: {
                        query,
                    },
                });
            }
        });
    }
    findOne(query) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield this._repository.findOneOrFail(query);
            }
            catch (error) {
                throw new crud_exception_filter_1.FindOneException({
                    error,
                    message: 'Error on fecth document by params',
                    data: {
                        query,
                    },
                });
            }
        });
    }
    findOneById(id) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield this._repository.findOneOrFail(id);
            }
            catch (error) {
                throw new crud_exception_filter_1.FindOneByIdException({
                    error,
                    message: 'Error on fetch document by id',
                    data: {
                        id,
                    },
                });
            }
        });
    }
}
exports.PrincipalService = PrincipalService;
