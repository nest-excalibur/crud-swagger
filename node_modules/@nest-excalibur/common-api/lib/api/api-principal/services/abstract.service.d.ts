import { DeepPartial, EntityManager, FindConditions, ObjectID } from 'typeorm';
import { FindFullQuery } from '../../..';
import { PrincipalService } from './principal.service';
import { TransactionResponse } from '../../..';
export declare abstract class AbstractService<Entity> extends PrincipalService<Entity> {
    findAllWithTransaction(entityManager: EntityManager, query: FindFullQuery): Promise<TransactionResponse<[Entity[], number]>>;
    findOneWithTransaction(entityManager: EntityManager, criteria: string | string[] | number | number[] | Date | Date[] | ObjectID | ObjectID[] | FindConditions<Entity>, record: DeepPartial<Entity>): Promise<TransactionResponse<Entity>>;
    updateOneWithTransaction(entityManager: EntityManager, criteria: string | string[] | number | number[] | Date | Date[] | ObjectID | ObjectID[] | FindConditions<Entity>, record: DeepPartial<Entity>): Promise<TransactionResponse<Entity>>;
    createOneWithTransaction(entityManager: EntityManager, newRecord: DeepPartial<Entity>): Promise<TransactionResponse<Entity>>;
    createManyWithTransaction(entityManager: EntityManager, newRecords: DeepPartial<Entity>[]): Promise<TransactionResponse<Entity[]>>;
    deleteOneWithTransaction(entityManager: EntityManager, criteria: string | string[] | number | number[] | Date | Date[] | ObjectID | ObjectID[] | FindConditions<Entity>): Promise<TransactionResponse<Entity>>;
    deleteManyByIdsWithTransaction(entityManager: EntityManager, ids: number[] | string[]): Promise<TransactionResponse<Entity[]>>;
}
