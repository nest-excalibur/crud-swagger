import { FilterQuery, Model } from 'mongoose';
import { Document } from 'mongoose';
import { MongooseCrudMethodsInterface } from '../../interfaces/service.crud.methods.interfaces';
export declare abstract class AbstractMongooseService<T extends Document> implements MongooseCrudMethodsInterface<T> {
    protected abstractModel: Model<T>;
    protected constructor(abstractModel: Model<T>);
    deleteMany(ids: string[]): Promise<string[]>;
    createMany(rows: Partial<T>[]): Promise<T[]>;
    createOne(row: Partial<T>): Promise<T>;
    deleteOne(id: any): Promise<T>;
    findAll(filter: FilterQuery<T>, projection?: any | null, options?: any | null): Promise<[T[], number]>;
    findOneById(id: string): Promise<T>;
    updateOne(id: string, document: any): Promise<T>;
}
