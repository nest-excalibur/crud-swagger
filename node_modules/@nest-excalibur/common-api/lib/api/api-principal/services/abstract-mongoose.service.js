"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractMongooseService = void 0;
const crud_exception_filter_1 = require("../exceptions/crud-exception.filter");
class AbstractMongooseService {
    constructor(abstractModel) {
        this.abstractModel = abstractModel;
    }
    deleteMany(ids) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const conditions = { _id: { $in: ids } };
                const promise = new Promise((resolve, reject) => {
                    this.abstractModel.deleteMany(conditions, (error) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            resolve(ids);
                        }
                    });
                });
                return yield promise;
            }
            catch (error) {
                throw new crud_exception_filter_1.DeleteManyException({
                    error,
                    message: 'Error on delete many',
                    data: {
                        ids,
                    },
                });
            }
        });
    }
    createMany(rows) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield this.abstractModel.insertMany(rows);
            }
            catch (error) {
                throw new crud_exception_filter_1.CreateManyException({
                    error,
                    message: 'Error on create many',
                    data: {
                        documents: rows,
                    },
                });
            }
        });
    }
    createOne(row) {
        try {
            const createdDocument = new this.abstractModel(row);
            return createdDocument.save();
        }
        catch (error) {
            throw new crud_exception_filter_1.CreateOneException({
                error,
                message: 'Error on delete',
                data: {
                    document: row,
                },
            });
        }
    }
    deleteOne(id) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const document = yield this.abstractModel.findById(id);
                yield this.abstractModel
                    .findByIdAndDelete({ id });
                return document;
            }
            catch (error) {
                throw new crud_exception_filter_1.DeleteOneException({
                    error,
                    message: 'Error on delete',
                    data: {
                        id,
                    }
                });
            }
        });
    }
    findAll(filter, projection, options) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const total = yield this.abstractModel.countDocuments(filter);
                const promise = new Promise((resolve, reject) => {
                    this.abstractModel.find(filter, projection, options, (err, docs) => {
                        if (err) {
                            reject(err);
                        }
                        else {
                            resolve([docs, total]);
                        }
                    });
                });
                return yield promise;
            }
            catch (error) {
                throw new crud_exception_filter_1.FindAllException({
                    error,
                    message: 'Error on find documents',
                    data: {
                        filter,
                        projection,
                        options,
                    },
                });
            }
        });
    }
    findOneById(id) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const document = yield this.abstractModel.findById(id);
                return document;
            }
            catch (error) {
                throw new crud_exception_filter_1.FindOneByIdException({
                    error,
                    message: 'Error on fetch document by id',
                    data: {
                        id,
                    },
                });
            }
        });
    }
    updateOne(id, document) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const promise = new Promise((resolve, reject) => {
                    this.abstractModel.findByIdAndUpdate(id, document, { upsert: false }, (err, doc) => {
                        if (err) {
                            reject(err);
                        }
                        else {
                            resolve(doc);
                        }
                    });
                });
                return yield promise;
            }
            catch (error) {
                throw new crud_exception_filter_1.UpdateOneException({
                    error,
                    message: 'Error on update document',
                    data: {
                        id,
                        document,
                    },
                });
            }
        });
    }
}
exports.AbstractMongooseService = AbstractMongooseService;
