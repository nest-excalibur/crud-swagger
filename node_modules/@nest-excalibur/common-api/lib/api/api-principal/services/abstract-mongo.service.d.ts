import { DeepPartial, FindManyOptions, MongoRepository, ObjectID } from 'typeorm';
import { PrincipalService } from './principal.service';
import { FindFullQuery, MongoIndexConfigInterface } from '../../..';
import { BaseMongoDTO } from '../../..';
import { PartialEntity } from '../../interfaces/service.crud.methods.interfaces';
export declare abstract class AbstractMongoService<Entity> extends PrincipalService<Entity> {
    private mongoRepository;
    private indexConfig?;
    protected constructor(mongoRepository: MongoRepository<Entity>, indexConfig?: MongoIndexConfigInterface | undefined);
    createOne(row: DeepPartial<Entity> | BaseMongoDTO): Promise<Entity>;
    deleteOne(id: any): Promise<Entity>;
    findAll(optionsOrConditions?: FindManyOptions | FindFullQuery): Promise<[Entity[], number]>;
    findOneById(id: any): Promise<Entity>;
    updateOne(id: string | number | ObjectID, row: PartialEntity<Entity>): Promise<Entity>;
    createMany(documents: DeepPartial<Entity>[] | BaseMongoDTO[] | Entity[]): Promise<Entity[]>;
    updateMany(documents: DeepPartial<Entity>[] | BaseMongoDTO[]): Promise<Entity[]>;
    deleteMany(ids: any[]): Promise<number>;
    createIndex(config: MongoIndexConfigInterface): Promise<string>;
}
