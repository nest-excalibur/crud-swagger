"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrudMongooseController = void 0;
const abstract_controller_1 = require("./abstract-controller");
const default_mongo_param_dto_1 = require("../schemas/default-mongo-param-dto");
const common_1 = require("@nestjs/common");
const crud_exception_filter_1 = require("../exceptions/crud-exception.filter");
const logger_service_1 = require("../services/logger.service");
const crud_controller_1 = require("./crud-controller");
function CrudMongooseController(options) {
    const idProperty = options.mapIdWith ? options.mapIdWith : 'id';
    const createDto = options.dtoConfig.createDtoType;
    const updateDto = options.dtoConfig.updateDtoType;
    const idParamDto = default_mongo_param_dto_1.DefaultMongoParamDto;
    const debug = !!options.enableErrorMessages;
    const createOnePipes = crud_controller_1.getPipesFromConfig({
        options,
        methodName: 'createOne',
        dto: createDto,
        isId: false,
        enableErrorMessages: debug
    });
    const findOnePipes = crud_controller_1.getPipesFromConfig({
        options,
        methodName: 'findOneById',
        dto: idParamDto,
        isId: true,
        enableErrorMessages: debug
    });
    const updateOnePipes = crud_controller_1.getPipesFromConfig({
        options,
        methodName: 'updateOne',
        dto: updateDto,
        isId: false,
        enableErrorMessages: debug
    });
    const createManyPipes = crud_controller_1.getPipesFromConfig({
        options,
        methodName: 'createMany',
        dto: createDto,
        isId: false,
        enableErrorMessages: debug
    });
    const deleteOnePipes = crud_controller_1.getPipesFromConfig({
        options,
        methodName: 'deleteOne',
        dto: idParamDto,
        isId: true,
        enableErrorMessages: debug
    });
    let BaseController = /** @class */ (() => {
        class BaseController extends abstract_controller_1.AbstractMongooseController {
            constructor(_service) {
                super(_service);
                this._service = _service;
            }
            createMany(newRecords) {
                return this._service.createMany(newRecords);
            }
            createOne(newRecord) {
                return this._service.createOne(newRecord);
            }
            deleteOne(params) {
                return __awaiter(this, void 0, void 0, function* () {
                    yield this._service.findOneById(params[idProperty]);
                    return this._service.deleteOne(params.id);
                });
            }
            findAll(searchCriteria) {
                return __awaiter(this, void 0, void 0, function* () {
                    let result;
                    let skip = 0;
                    let take = 10;
                    try {
                        let query;
                        if (searchCriteria) {
                            query = JSON.parse(searchCriteria);
                            skip = query.skip ? query.skip : 0;
                            take = query.take ? query.take : 10;
                            result = yield this._service.findAll(Object.assign({}, query.where), null, { sort: { _id: -1 }, limit: take, skip });
                        }
                        else {
                            query = { where: {}, skip: 0, take: 10 };
                            result = yield this._service.findAll({}, null, { sort: { _id: -1 }, limit: take, skip });
                        }
                        const totalRecords = +result[1];
                        const data = result[0];
                        const restingRecords = totalRecords - (skip + take);
                        const isLastPage = restingRecords <= 0;
                        let nextQuery = null;
                        if (!isLastPage) {
                            const isNotLimit = restingRecords >= take;
                            const nextSkip = skip + take;
                            const nextTake = isNotLimit ? take : restingRecords;
                            const partialQuery = Object.assign({}, query);
                            partialQuery.skip = nextSkip;
                            partialQuery.take = nextTake;
                            if (query.where) {
                                const hasWhereConditions = Object.keys(query.where).length;
                                partialQuery.where = hasWhereConditions > 0 ? partialQuery.where : undefined;
                            }
                            nextQuery = partialQuery;
                        }
                        return {
                            nextQuery,
                            data,
                            total: totalRecords,
                        };
                    }
                    catch (error) {
                        const logger = logger_service_1.LoggerService.getInstance().logger;
                        logger.warn('Incorrect query params, bringing default query!', this.constructor.name);
                        result = yield this._service.findAll({}, null, { sort: { _id: -1 }, limit: take, skip });
                        return {
                            nextQuery: { skip: 10, take },
                            data: result[0],
                            total: result[1],
                        };
                    }
                });
            }
            findOneById(params) {
                return this._service.findOneById(params[idProperty]);
            }
            updateOne(params, recordToUpdate) {
                return __awaiter(this, void 0, void 0, function* () {
                    yield this._service.findOneById(params[idProperty]);
                    return yield this._service.updateOne(params[idProperty], recordToUpdate);
                });
            }
        }
        __decorate([
            common_1.Post('create-many'),
            common_1.UseFilters(new crud_exception_filter_1.CrudFilterException(debug)),
            common_1.UsePipes(...createManyPipes),
            __param(0, common_1.Body()),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Array]),
            __metadata("design:returntype", void 0)
        ], BaseController.prototype, "createMany", null);
        __decorate([
            common_1.Post(),
            common_1.UseFilters(new crud_exception_filter_1.CrudFilterException(debug)),
            common_1.UsePipes(...createOnePipes),
            __param(0, common_1.Body()),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", void 0)
        ], BaseController.prototype, "createOne", null);
        __decorate([
            common_1.Delete(`:${idProperty}`),
            common_1.UseFilters(new crud_exception_filter_1.CrudFilterException(debug)),
            __param(0, common_1.Param(...deleteOnePipes)),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", Promise)
        ], BaseController.prototype, "deleteOne", null);
        __decorate([
            common_1.Get(),
            common_1.UseFilters(new crud_exception_filter_1.CrudFilterException(debug)),
            __param(0, common_1.Query('query')),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", Promise)
        ], BaseController.prototype, "findAll", null);
        __decorate([
            common_1.Get(`:${idProperty}`),
            common_1.UseFilters(new crud_exception_filter_1.CrudFilterException(debug)),
            __param(0, common_1.Param(...findOnePipes)),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", void 0)
        ], BaseController.prototype, "findOneById", null);
        __decorate([
            common_1.Put(`:${idProperty}`),
            common_1.UseFilters(new crud_exception_filter_1.CrudFilterException(debug)),
            __param(0, common_1.Param(...findOnePipes)),
            __param(1, common_1.Body(...updateOnePipes)),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object, Object]),
            __metadata("design:returntype", Promise)
        ], BaseController.prototype, "updateOne", null);
        return BaseController;
    })();
    return common_1.mixin(BaseController);
}
exports.CrudMongooseController = CrudMongooseController;
