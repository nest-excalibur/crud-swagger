import { ArgumentsHost, ExceptionFilter } from '@nestjs/common';
export interface IErrorPayload {
    error: any;
    message: string;
    data?: any;
}
export declare abstract class DataBaseException {
    protected payload: IErrorPayload;
    protected constructor(payload: any);
    get errorPayload(): IErrorPayload;
}
export declare class CreateOneException extends DataBaseException {
    constructor(payload: IErrorPayload, status?: number);
}
export declare class UpdateOneException extends DataBaseException {
    constructor(payload: IErrorPayload, status?: number);
}
export declare class UpdateManyException extends DataBaseException {
    constructor(payload: IErrorPayload, status?: number);
}
export declare class DeleteOneException extends DataBaseException {
    constructor(payload: IErrorPayload, status?: number);
}
export declare class DeleteManyException extends DataBaseException {
    constructor(payload: IErrorPayload, status?: number);
}
export declare class FindAllException extends DataBaseException {
    constructor(payload: IErrorPayload, status?: number);
}
export declare class FindOneByIdException extends DataBaseException {
    constructor(payload: IErrorPayload, status?: number);
}
export declare class FindOneException extends DataBaseException {
    constructor(payload: IErrorPayload, status?: number);
}
export declare class CreateManyException extends DataBaseException {
    constructor(payload: IErrorPayload, status?: number);
}
export declare class CreateIndexException extends DataBaseException {
    constructor(payload: IErrorPayload, status?: number);
}
export declare class CrudFilterException implements ExceptionFilter {
    debug: boolean;
    constructor(debug?: boolean);
    catch(exception: DataBaseException, host: ArgumentsHost): void;
}
