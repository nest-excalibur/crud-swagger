"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrudFilterException = exports.CreateIndexException = exports.CreateManyException = exports.FindOneException = exports.FindOneByIdException = exports.FindAllException = exports.DeleteManyException = exports.DeleteOneException = exports.UpdateManyException = exports.UpdateOneException = exports.CreateOneException = exports.DataBaseException = void 0;
const common_1 = require("@nestjs/common");
const logger_service_1 = require("../services/logger.service");
class DataBaseException {
    constructor(payload) {
        this.payload = payload;
    }
    get errorPayload() {
        return this.payload;
    }
}
exports.DataBaseException = DataBaseException;
class CreateOneException extends DataBaseException {
    constructor(payload, status) {
        super(payload);
    }
}
exports.CreateOneException = CreateOneException;
class UpdateOneException extends DataBaseException {
    constructor(payload, status) {
        super(payload);
    }
}
exports.UpdateOneException = UpdateOneException;
class UpdateManyException extends DataBaseException {
    constructor(payload, status) {
        super(payload);
    }
}
exports.UpdateManyException = UpdateManyException;
class DeleteOneException extends DataBaseException {
    constructor(payload, status) {
        super(payload);
    }
}
exports.DeleteOneException = DeleteOneException;
class DeleteManyException extends DataBaseException {
    constructor(payload, status) {
        super(payload);
    }
}
exports.DeleteManyException = DeleteManyException;
class FindAllException extends DataBaseException {
    constructor(payload, status) {
        super(payload);
    }
}
exports.FindAllException = FindAllException;
class FindOneByIdException extends DataBaseException {
    constructor(payload, status) {
        super(payload);
    }
}
exports.FindOneByIdException = FindOneByIdException;
class FindOneException extends DataBaseException {
    constructor(payload, status) {
        super(payload);
    }
}
exports.FindOneException = FindOneException;
class CreateManyException extends DataBaseException {
    constructor(payload, status) {
        super(payload);
    }
}
exports.CreateManyException = CreateManyException;
class CreateIndexException extends DataBaseException {
    constructor(payload, status) {
        super(payload);
    }
}
exports.CreateIndexException = CreateIndexException;
let CrudFilterException = /** @class */ (() => {
    let CrudFilterException = class CrudFilterException {
        constructor(debug = false) {
            this.debug = debug;
        }
        catch(exception, host) {
            const ctx = host.switchToHttp();
            const response = ctx.getResponse();
            const request = ctx.getRequest();
            const { message, error, data } = exception.errorPayload;
            let status = common_1.HttpStatus.INTERNAL_SERVER_ERROR;
            const isCreateException = exception instanceof CreateOneException;
            const isUpdateOneException = exception instanceof UpdateOneException;
            const isDeleteOneException = exception instanceof DeleteOneException;
            const isFindAllException = exception instanceof FindAllException;
            const isFindOneByIdException = exception instanceof FindOneByIdException;
            const isCreateManyException = exception instanceof CreateManyException;
            const isDeleteManyException = exception instanceof DeleteManyException;
            const isUpdateManyException = exception instanceof UpdateManyException;
            const isCreateError = isCreateException || isCreateManyException;
            const isUpdateError = isUpdateOneException || isUpdateManyException;
            const isDeleteError = isDeleteOneException || isDeleteManyException;
            const isFindError = isFindOneByIdException || isFindAllException;
            if (isCreateError || isUpdateError || isDeleteError) {
                status = common_1.HttpStatus.BAD_REQUEST;
            }
            if (isFindError) {
                status = common_1.HttpStatus.NOT_FOUND;
            }
            const path = request.route.path;
            const method = request.method;
            const context = `${method} ${path}`;
            const logger = logger_service_1.LoggerService.getInstance().logger;
            logger.error(message, '', context);
            if (this.debug) {
                logger.debug(error, context);
                logger.debug(data, context);
            }
            response
                .status(status)
                .json({
                message,
                statusCode: status,
                timestamp: new Date().toISOString(),
            });
        }
    };
    CrudFilterException = __decorate([
        common_1.Catch(CreateOneException, UpdateOneException, DeleteOneException, FindAllException, FindOneByIdException, CreateManyException, DeleteManyException, UpdateManyException),
        __metadata("design:paramtypes", [Boolean])
    ], CrudFilterException);
    return CrudFilterException;
})();
exports.CrudFilterException = CrudFilterException;
