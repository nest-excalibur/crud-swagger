"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseAndValidateMany = exports.validateMany = void 0;
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
function _parseAndValidate(record, dtoClass) {
    return __awaiter(this, void 0, void 0, function* () {
        if (record.id) {
            delete record.id;
        }
        const parsedRecord = class_transformer_1.plainToClass(dtoClass, record);
        let errors = [];
        try {
            const validationResult = yield class_validator_1.validate(parsedRecord);
            errors = [
                ...errors,
                ...validationResult,
            ];
        }
        catch (error) {
            errors.push(error);
        }
        return {
            errors,
            parsedData: parsedRecord,
        };
    });
}
function validateMany(records, dtoClass) {
    return __awaiter(this, void 0, void 0, function* () {
        let validationErrors = [];
        for (const record of records) {
            const { errors } = yield _parseAndValidate(record, dtoClass);
            validationErrors = [
                ...validationErrors,
                ...errors,
            ];
        }
        return validationErrors;
    });
}
exports.validateMany = validateMany;
function parseAndValidateMany(records, dtoClass) {
    return __awaiter(this, void 0, void 0, function* () {
        let validationErrors = [];
        const data = [];
        for (const record of records) {
            const { errors, parsedData } = yield _parseAndValidate(record, dtoClass);
            if (errors.length > 0) {
                validationErrors = [
                    ...validationErrors,
                    {
                        parsedData,
                        errors,
                    }
                ];
            }
            data.push(parsedData);
        }
        return {
            errors: validationErrors,
            parsedData: data,
        };
    });
}
exports.parseAndValidateMany = parseAndValidateMany;
