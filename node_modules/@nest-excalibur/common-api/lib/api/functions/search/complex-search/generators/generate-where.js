"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateWhere = void 0;
const generate_where_query_1 = require("./generate-where-query");
const build_simple_pure_where_1 = require("./build-simple-pure-where");
const build_pure_where_with_operator_1 = require("./build-pure-where-with-operator");
const verificator_helper_1 = require("../verificators-functions/verificator-helper");
function generateWhere(query, atribute, value, // Atribute value
entityName, atributeIndex = 1) {
    // Verify is an Array
    const isArray = value instanceof Array;
    if (isArray) {
        const values = value;
        const total = values.length;
        const acc = values.reduce((accumulator, orValue, index) => {
            // If value has an operator Ex: -> "price" :{"$in":"[10,20]"}
            // const hasComplexQueryOperator = esInterfazDeOperadorConsultaCompuesta(orValue);
            const hasComplexQueryOperator = verificator_helper_1.VerificatorHelper.isComplexOperatorObject(orValue);
            // Define a pure-where object
            let generatedPureWhere;
            if (hasComplexQueryOperator) {
                orValue = orValue;
                orValue.conjunction = 'or';
                generatedPureWhere = build_pure_where_with_operator_1.buildPureWhereWithOperator(atribute, orValue, entityName, index);
            }
            else {
                generatedPureWhere = build_simple_pure_where_1.buildSimplePureWhere(atribute, orValue, entityName, index);
            }
            if (generatedPureWhere) {
                accumulator.where = `${index > 0 ? accumulator.where : ' '}` + generatedPureWhere.where + `${(index + 1) === total ? ' ' : ' OR '}`;
                accumulator.parameters = Object.assign(Object.assign({}, accumulator.parameters), generatedPureWhere.parameters);
            }
            return accumulator;
        }, {
            where: '',
            parametros: {},
        });
        acc.where = `( ${acc.where}  )`;
        query = generate_where_query_1.generateWhereQuery(query, acc, 'and');
        return query;
    }
    const pureWhereGenerated = build_simple_pure_where_1.buildSimplePureWhere(atribute, value, entityName, atributeIndex);
    return generate_where_query_1.generateWhereQuery(query, pureWhereGenerated, pureWhereGenerated === null || pureWhereGenerated === void 0 ? void 0 : pureWhereGenerated.conjunction);
}
exports.generateWhere = generateWhere;
