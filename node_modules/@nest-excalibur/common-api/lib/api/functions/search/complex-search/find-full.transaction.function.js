"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findFullTransaccion = void 0;
const common_1 = require("@nestjs/common");
const search_records_1 = require("./search-functions/search-records");
const query_operators_1 = require("./constants/query-operators");
function findFullTransaccion(entityManager, entity, findFullQuery) {
    return __awaiter(this, void 0, void 0, function* () {
        const currentQuery = entityManager.createQueryBuilder(entity, query_operators_1.BASE_ENTITY_NAME);
        try {
            const data = yield search_records_1.searchRecords(currentQuery, findFullQuery);
            return {
                response: data,
                entityManager,
            };
        }
        catch (error) {
            console.error({
                error,
                message: 'Error on generate query',
                data: {
                    query: findFullQuery,
                },
            });
            throw new common_1.InternalServerErrorException({
                message: 'Error on generate query',
            });
        }
    });
}
exports.findFullTransaccion = findFullTransaccion;
