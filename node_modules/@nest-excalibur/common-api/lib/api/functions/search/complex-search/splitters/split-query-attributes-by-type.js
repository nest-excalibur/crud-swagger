"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.splitQueryAttributesByType = void 0;
const verificator_helper_1 = require("../verificators-functions/verificator-helper");
const query_operators_1 = require("../constants/query-operators");
// splitQueryAttributesByType
function splitQueryAttributesByType(query) {
    // EXAMPLE: INPUT QUERY
    // {
    //     category: {  -> complexQueries -> join with category table
    //         $pjoin: 'inner'
    //     },
    //     price: [  -> whereOr -> array of conditions
    //         {
    //             $in: [5, 10],
    //         },
    //         {
    //             $btw: [20, 30],
    //         }
    //     ],
    //     name: { -> complexOperator -> like-operator
    //         $like: '%choco%'
    //     },
    //     avalaible: 0, -> simpleOperator
    // }
    const attributesList = Object.keys(query);
    return attributesList.reduce((accumulator, attributeName) => {
        const attributeValue = query[attributeName];
        const isObject = verificator_helper_1.VerificatorHelper.verifyIsObject(attributeValue);
        const isArray = attributeValue instanceof Array;
        const isSelect = attributeName === query_operators_1.SELECT_KEYWORD;
        // const esObjetoConsulta = esInterfazDeOperadorConsultaCompuesta(valor);
        const hasComplexOperatorQuery = verificator_helper_1.VerificatorHelper.isComplexOperatorObject(attributeValue);
        if (isObject && !hasComplexOperatorQuery) {
            accumulator.complexQueries.push(attributeName);
            return accumulator;
        }
        if (!isObject && !hasComplexOperatorQuery && !isArray && !isSelect) {
            accumulator.simpleQueries.push(attributeName);
            return accumulator;
        }
        if (hasComplexOperatorQuery) {
            accumulator.complexOperatorsQueries.push(attributeName);
            return accumulator;
        }
        if (isArray && !isSelect) {
            accumulator.whereOrQueries.push(attributeName);
            return accumulator;
        }
        if (isSelect) {
            accumulator.selectAttrs = [...query[attributeName]];
            return accumulator;
        }
        return accumulator;
    }, { simpleQueries: [], complexOperatorsQueries: [], complexQueries: [], whereOrQueries: [], selectAttrs: [] });
}
exports.splitQueryAttributesByType = splitQueryAttributesByType;
