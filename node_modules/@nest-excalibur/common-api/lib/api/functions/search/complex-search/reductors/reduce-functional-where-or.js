"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reduceFunctionalWhereOr = void 0;
const build_pure_where_with_operator_1 = require("../generators/build-pure-where-with-operator");
const verificator_helper_1 = require("../verificators-functions/verificator-helper");
function reduceFunctionalWhereOr(entityName, attributeName) {
    return (accumulator, currentValue, localIndex) => {
        let pureWhereLocal;
        const isComplexOperatorQuery = verificator_helper_1.VerificatorHelper.isComplexOperatorObject(currentValue);
        // const strKeyLocalParameter = `attributeValue${localIndex}${entityName}${attributeName}`;
        const strKeyLocalParameter = build_pure_where_with_operator_1.compressKey(localIndex, entityName, attributeName);
        if (isComplexOperatorQuery) {
            pureWhereLocal = build_pure_where_with_operator_1.buildPureWhereWithOperator(attributeName, currentValue, entityName, localIndex);
        }
        else {
            const localParameters = {};
            localParameters[strKeyLocalParameter] = currentValue;
            pureWhereLocal = {
                where: `${entityName}.${attributeName}=:${strKeyLocalParameter}`,
                parameters: localParameters,
            };
        }
        accumulator.where = accumulator.where + ' ' + (localIndex > 0 ? 'or' : '') + ' ' + pureWhereLocal.where;
        if (localIndex > 0) {
            accumulator.parameters = Object.assign(Object.assign({}, accumulator.parameters), pureWhereLocal.parameters);
        }
        else {
            accumulator.parameters = Object.assign({}, pureWhereLocal.parameters);
        }
        accumulator.conjunction = 'and';
        return accumulator;
    };
}
exports.reduceFunctionalWhereOr = reduceFunctionalWhereOr;
