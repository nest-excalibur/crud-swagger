"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateQuery = void 0;
const build_where_with_join_1 = require("./build-where-with-join");
const find_join_relation_type_1 = require("../splitters/find-join-relation-type");
const generate_where_1 = require("./generate-where");
const build_where_operador_1 = require("./build-where-operador");
const verificator_helper_1 = require("../verificators-functions/verificator-helper");
const query_operators_1 = require("../constants/query-operators");
const build_select_1 = require("./build-select");
// Esta es la funcion api-principal en donde primero se itera a la raiz
function generateQuery(baseQueryBuilder, query, parentEntity = query_operators_1.BASE_ENTITY_NAME) {
    return __awaiter(this, void 0, void 0, function* () {
        const atributes = Object.keys(query);
        yield atributes.forEach((atributeName) => {
            const atributeValue = query[atributeName];
            // Si el valor del atributo es un objeto
            const isObject = verificator_helper_1.VerificatorHelper.verifyIsObject(atributeValue);
            // Si el valor del atributo es un objeto del tipo consulta compuesta
            // const tieneOperadorConsultaCompuesta = esInterfazDeOperadorConsultaCompuesta(valorAtributo);
            const hasComplexOperatorQuery = verificator_helper_1.VerificatorHelper.isComplexOperatorObject(atributeValue);
            // Si es un objeto y no tiene consultaCompuesta entonces debe ser una relacion join.
            const isJoinRelation = isObject && !hasComplexOperatorQuery;
            const isSelect = atributeName === query_operators_1.SELECT_KEYWORD;
            if (hasComplexOperatorQuery) {
                baseQueryBuilder = build_where_operador_1.buildWhereOperador(baseQueryBuilder, atributeName, atributeValue, parentEntity);
            }
            if (!hasComplexOperatorQuery && !isObject && !isSelect) {
                baseQueryBuilder = generate_where_1.generateWhere(baseQueryBuilder, atributeName, atributeValue, parentEntity);
            }
            if (isJoinRelation) {
                const joinType = find_join_relation_type_1.findJoinRelationType(query[atributeName]);
                baseQueryBuilder = build_where_with_join_1.buildWhereWithjoin(baseQueryBuilder, atributeName, atributeValue, parentEntity, joinType);
            }
            if (isSelect) {
                baseQueryBuilder = build_select_1.buildSelect(baseQueryBuilder, parentEntity, atributeValue, false);
            }
        });
        return baseQueryBuilder;
    });
}
exports.generateQuery = generateQuery;
