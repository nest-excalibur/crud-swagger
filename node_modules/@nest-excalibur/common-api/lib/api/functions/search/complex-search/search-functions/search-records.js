"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.searchRecords = void 0;
const generate_query_1 = require("../generators/generate-query");
const query_operators_1 = require("../constants/query-operators");
function searchRecords(selectQueryBuilder, query) {
    return __awaiter(this, void 0, void 0, function* () {
        const sqlQuery = yield generate_query_1.generateQuery(selectQueryBuilder, query.where);
        const hasSkip = !!query.skip;
        const hasTake = !!query.take;
        const hasOrderBy = !!query.orderBy;
        let queryResponse;
        let skip = 0;
        let take = 10;
        let orderBy = {};
        orderBy[`${query_operators_1.BASE_ENTITY_NAME}.id`] = 'DESC';
        if (hasOrderBy) {
            orderBy = query.orderBy;
        }
        if (hasSkip) {
            skip = query.skip;
        }
        if (hasTake) {
            take = query.take;
        }
        if (skip === 0 && take === 0) {
            queryResponse = yield sqlQuery.orderBy(orderBy);
        }
        else {
            queryResponse = yield sqlQuery.orderBy(orderBy).skip(skip).take(take);
        }
        queryResponse.skip(skip).take(take);
        return queryResponse.getManyAndCount();
    });
}
exports.searchRecords = searchRecords;
